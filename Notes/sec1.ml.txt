(*
TA Name: Tomer Weiss
Email:   tweiss@cs.ucla.edu

Office hours: MW 10-11AM, TA room, BH
Might be different next week... updates later

OCAML:
    Lists
    Pattern matching
    Complicated Pattern Matching
    User defined types?
* *)

let dummy = 5


(*
Cons ::

    (element of list)::(tail of the list)

    tail of list is of type list: 'a list
    element is just type element   'a
    1::2::3::[]  = [1;2;3]
    :: has an element on the left and list on right
    :: is right associative
    1::2 is invalid since 2 is not of type int list
    ['a;'a..... ; 'a]  =  'a :: 'a :: .... :: []

Append @

Pattern Matching

  let rec dummy arg1 arg2 .... =  
    match arg1 with
    | [] -> do something1 
    | [1;2] ->  matches lists that are exactly [1;2]
    | [h::t] -> matches a list of lists, with at least 1 element in the outer list
    | [x;y] ->  x::y::[] 
    | x::xs ->  matches a list of head x and tail xs
    | _::t -> matches a list with tail t, don't care about first element  
    | h::m::t -> a list of some length with two single elements at least
    | (x,y) -> matches tuples of two element 
    | (_,y) -> matches tuples of two elements, don't care about first element 
    | x when x==3 -> matches element x when x is equal to 3 
    | (x,y)::tail ->  matches list of tuples of two elments
    | _ -> matches everything

 
 *
 * input: 1::2::3::4::[]
 * output: 2::4::[]
 *
 *input: [] -> []
  input [2] -> []
 * *)

let rec everySecond l = 
   match l with 
   | a::b::tail  ->  b:: ( everySecond tail) 
   | [] -> [] 
   | x::[] -> []

(*
 *  [(1,2);(3,4)] -> [2;4]
 *  [] -> []
 *  [(1,2)] -> [2]
 * *)

let rec secondGet l = 
    match l with 
    | [] -> []
    | (x,y)::t -> y::( secondGet t )


(*  
 *  check if element e is in list
 *  l -> if it is return true
 *                        otherwise false
 *
 * *)

let rec contains e l = 
    match l with 
    | [] -> false
    | h::t -> if h == e then  
                 true
              else
                 contains e t 


 (* range 1 3 1 -> [1;2;3]
  * range 1 4 2 - > [1;3]
  * range 2 10 5 -> [2;7]
  * range 1 10 2 -> [1;3;5;7;9]
  *
  * ]*)

 (* return a range of integers in steps *)
let rec range from till step = 
    if from <= till then 
        from :: ( range  (from+step) till step )
    else
        []

(*
 * Convert a list to indexed tuples
 * ["a";"b";"c"] -> [(1,"a");(2,"b");(3,"c")]
 * [] -> []
 * [17] -> [(1,17)]
 *
 *  let something = somethingElse 
 *  in
*   let ....
 * * *)
let indexedList l = 
    let rec indexedListInner l idx =
        match l with
        | h::t -> (idx,h) ::(indexedListInner t (idx+1 ))
        | [] -> []
    in
    indexedListInner l 1

(*
 * check if list l1 is a prefix of l2 -> if it is return true
 * else false 
 *
 * [1;2;3] [1;2;3;4;5;6] -> true
 * [1;2;3] [1;2;4] -> false 
* 
 * *)
let rec prefixOf_first l1 l2 = 
    match l1 with
    | [] -> true
    | x::xs ->  match l2 with
                | [] -> false
                | y::ys -> if x == y then
                            prefixOf_first xs ys
                           else
                            false 

let rec prefixOf l1 l2 =
    match l1,l2 with
    | [],_ -> true
    | _,[] -> false
    | x::xs,y::ys  -> if x == y then prefixOf xs ys  else false 


let rec sum l  =
    match l with 
    | [] -> 0
    | x::xs -> x + sum xs






